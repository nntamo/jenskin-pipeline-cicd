# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: movie-db-prod
#   namespace: prod
#   labels:
#     app: movie-db
#     environment: prod
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: movie-db
#       environment: prod
#   template:
#     metadata:
#       labels:
#         app: movie-db
#         environment: prod
#     spec:
#       containers:
#       - name: postgres
#         image: postgres:12.1-alpine
#         ports:
#         - containerPort: 5432
#         env:
#         - name: POSTGRES_USER
#           valueFrom:
#             secretKeyRef:
#               name: movie-db-secret
#               key: POSTGRES_USER
#         - name: POSTGRES_PASSWORD
#           valueFrom:
#             secretKeyRef:
#               name: movie-db-secret
#               key: POSTGRES_PASSWORD
#         - name: POSTGRES_DB
#           valueFrom:
#             secretKeyRef:
#               name: movie-db-secret
#               key: POSTGRES_DB
#         volumeMounts:
#         - name: postgres-data-movie
#           mountPath: /var/lib/postgresql/data
#         resources:
#           requests:
#             memory: "64Mi"
#             cpu: "50m"
#           limits:
#             memory: "256Mi"
#             cpu: "200m"
#       volumes:
#       - name: postgres-data-movie
#         persistentVolumeClaim:
#           claimName: postgres-data-movie-prod



apiVersion: apps/v1
kind: Deployment
metadata:
  name: movie-db-prod
  namespace: prod
  labels:
    app: movie-db
    environment: prod
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: movie-db
      environment: prod
  strategy:
    type: Recreate  # Important pour les bases de données avec volumes
  template:
    metadata:
      labels:
        app: movie-db
        environment: prod
        component: database
    spec:
      # Security context pour PostgreSQL en production
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      
      containers:
      - name: postgres
        image: postgres:15-alpine  # Version récente et sécurisée
        ports:
        - containerPort: 5432
          name: postgres
        
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: movie-db-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: movie-db-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: movie-db-secret
              key: POSTGRES_DB
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_INITDB_ARGS
          value: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
        
        # CORRECTION: Ressources appropriées pour PostgreSQL en production
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        
        # Health checks critiques pour la production
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        startupProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        
        volumeMounts:
        - name: postgres-data-movie
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
          readOnly: true
        - name: shared-memory
          mountPath: /dev/shm
      
      volumes:
      - name: postgres-data-movie
        persistentVolumeClaim:
          claimName: postgres-data-movie-prod
      - name: postgres-config
        configMap:
          name: postgres-config-movie-prod
          optional: true
      - name: shared-memory
        emptyDir:
          medium: Memory
          sizeLimit: 1Gi
      
      # Contraintes de placement pour la production
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values:
                - database
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - movie-db
              topologyKey: kubernetes.io/hostname