# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: movie-service-prod
#   namespace: prod
#   labels:
#     app: movie-service
#     environment: prod
# spec:
#   replicas: 3
#   selector:
#     matchLabels:
#       app: movie-service
#       environment: prod
#   template:
#     metadata:
#       labels:
#         app: movie-service
#         environment: prod
#     spec:
#       imagePullSecrets:
#       - name: dockerhub-secret
#       containers:
#       - name: movie-service
#         image: nguetsop/movie-service:latest
#         ports:
#         - containerPort: 8000
#         env:
#         - name: DATABASE_URI
#           valueFrom:
#             secretKeyRef:
#               name: movie-db-secret
#               key: DATABASE_URI
#         - name: CAST_SERVICE_HOST_URL
#           value: "http://cast-service:8000/api/v1/casts/"
#         resources:
#           requests:
#             memory: "64Mi"
#             cpu: "50m"
#           limits:
#             memory: "256Mi"
#             cpu: "200m"



apiVersion: apps/v1
kind: Deployment
metadata:
  name: movie-service-prod
  namespace: prod
  labels:
    app: movie-service
    environment: prod
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: movie-service
      environment: prod
  template:
    metadata:
      labels:
        app: movie-service
        environment: prod
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      imagePullSecrets:
      - name: dockerhub-secret
      containers:
      - name: movie-service
        image: nguetsop/movie-service:v.16.0
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URI
          valueFrom:
            secretKeyRef:
              name: movie-db-secret
              key: DATABASE_URI
        - name: CAST_SERVICE_HOST_URL
          value: "http://cast-service:8000/api/v1/casts/"
        - name: ENVIRONMENT
          value: "production"
        
        # Ressources appropriées pour production
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      
      # Distribution des pods sur différents nœuds
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - movie-service
              topologyKey: kubernetes.io/hostname